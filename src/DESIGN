
0. Should have a S3Service queue. Index the queue based on files to be
changed. Include the operation to be performed.
  
 * time_conditional_upload
 * local_update_upload

1. RSAService

Start application and make sure we have a private and public key pair
(store these under hidden home directory).

We should probably store our friends' pub keys here.

2. StatService

Find directory that we're supposed to walk (also stored in directory).

Check for updates.

3. S3Service.

Upload, delete as necessary.

----------------------------------------------------------------------

Should upload a symmetric-key encrypted file with a password that the
user sets for the application.

super-backup that is symmetrically encrypted with user's fullname and
security question answer.

Users don't actually need to have AWS account. Make files public and
allow users to download the files that a friend links for them. Just
need to pass th pub key to the friend.

----------------------------------------------------------------------

Given a directory, we should be able to keep track of file changes in
that directory.

In order to properly sign the files, we should have locally available
RSA public key that we can

Must encrypt files using a strong symmetric key. The symmetric key
must be encrypted with the public key and somehow linked with the
symmetric key-encrypted file.

# Generate symmetric key password with following:
head -c 32 /dev/urandom | openssl enc -base64 > file.password.txt

# AES encrypt file
openssl enc -aes-256-cbc -a -salt -in file.txt -out file.enc -pass file:file.password.txt
openssl enc -d -aes-256-cbc -a -in file.enc -pass file:file.password.txt

How to bundle the PKI encypted password and SymK encrypted file? Call
it by the filename and timestamp?

WARNING. We use the RSA algorithm in order to encrypt and decrypt your
messages. This is a commonly used algorithm and is well-respected for
its general strength. There are shortcomings to the protocol.
