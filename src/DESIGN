----------------------------------------------------------------------

Key Management

Going to depend on GPG for our security. We want to leverage the
OpenPGP protocol.

Key Generation is a challenge since the existing free and open source
OpenPGP implementation GnuPrivacyGuard (GPG) does not include key
generation in its handy GPG Made Easy (GPGME) library. Therefore, we
must wrap an external process call to GPG.

All other services can be handle from the PyMe interface to GPGME.

When using the key generation phase of the wrapper, we should make
sure to launch the random number generator daemon (rngd).

----------------------------------------------------------------------


Block caching.
4 MB block size. 

Groups implemented on the client itself. Modify permissions file to
enforce policy.

----------------------------------------------------------------------

MIME Type

Handle user configuration with the web browser. 


----------------------------------------------------------------------

SimpleDB
Use this per "collection" that should be shared.

Most users would only require one domain for their personal
files. Items that are in a domain can track the entire metadata
history of a file. 

----------------------------------------------------------------------

Amazon S3 Buckets

For every sdb bucket (public), there should be a corresponding admin
bucket. The admin bucket contains a symmetric key encrypted private
key.

Should also contain the public keys of our friends and the state
associated with our sharing. We do not make this bucket public.

Sharing could be done by polling the buckets of our friends, which are
public, and scanning for suffixes that correspond to our AWS email
address.

----------------------------------------------------------------------

Can use regular user password that is encrypted and put on S3 for
recovering the private key. 

How to notify users of updates in other buckets?

Do users understand "read-only" vs "read-write" when it comes to
sharing?

----------------------------------------------------------------------

Should upload a symmetric-key encrypted file with a password that the
user sets for the application.

super-backup that is symmetrically encrypted with user's fullname and
security question answer.

Users don't actually need to have AWS account. Make files public and
allow users to download the files that a friend links for them. Just
need to pass the pub key to the friend.

----------------------------------------------------------------------

Given a directory, we should be able to keep track of file changes in
that directory.

In order to properly sign the files, we should have locally available
RSA public key that we can

Must encrypt files using a strong symmetric key. The symmetric key
must be encrypted with the public key and somehow linked with the
symmetric key-encrypted file.

----------------------------------------------------------------------
Photo sharing without revealing plaintext to the cloud.

 * encrypt the photos content using our system.
 * Upload to facebook.
 * have a plugin that makes it easy to decode the photo.
----------------------------------------------------------------------

